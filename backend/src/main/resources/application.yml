spring:
  application:
    name: vamsasetu-backend
  
  profiles:
    active: dev
  
  # Database Configuration
  datasource:
    url: ${POSTGRES_URL:jdbc:postgresql://localhost:5432/vamsasetu}
    username: ${POSTGRES_USERNAME:vamsasetu}
    password: ${POSTGRES_PASSWORD:vamsasetu123}
    driver-class-name: org.postgresql.Driver
  
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
  
  # Neo4j Configuration
  neo4j:
    uri: ${NEO4J_URI:bolt://localhost:7687}
    authentication:
      username: ${NEO4J_USERNAME:neo4j}
      password: ${NEO4J_PASSWORD:vamsasetu123}
    database: neo4j
  
  # Redis Configuration
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
  
  # Mail Configuration
  mail:
    host: ${MAIL_HOST:smtp.gmail.com}
    port: ${MAIL_PORT:587}
    username: ${MAIL_USERNAME:}
    password: ${MAIL_PASSWORD:}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
  
  # Jackson Configuration
  jackson:
    time-zone: UTC
    date-format: yyyy-MM-dd'T'HH:mm:ss.SSS'Z'
    serialization:
      write-dates-as-timestamps: false

# Server Configuration
server:
  port: ${SERVER_PORT:8080}
  servlet:
    context-path: /api
  compression:
    enabled: true
  error:
    include-message: always
    include-binding-errors: always

# Management/Actuator
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: when-authorized

# Logging
logging:
  level:
    com.vamsasetu: DEBUG
    org.springframework.security: DEBUG
    org.neo4j: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# Application Configuration
app:
  jwt:
    secret: ${JWT_SECRET:vamsasetu-secret-key-change-in-production}
    expiration: 86400000 # 24 hours
  
  cors:
    allowed-origins: ${CORS_ORIGINS:http://localhost:3000}
    allowed-methods: GET,POST,PUT,DELETE,OPTIONS
    allowed-headers: "*"
    allow-credentials: true
  
  notification:
    twilio:
      account-sid: ${TWILIO_ACCOUNT_SID:}
      auth-token: ${TWILIO_AUTH_TOKEN:}
      phone-number: ${TWILIO_PHONE_NUMBER:}
    whatsapp:
      api-url: ${WHATSAPP_API_URL:}
      access-token: ${WHATSAPP_ACCESS_TOKEN:}
    email:
      from: ${EMAIL_FROM:noreply@vamsasetu.com}
      reply-to: ${EMAIL_REPLY_TO:support@vamsasetu.com}

---
# Development Profile
spring:
  config:
    activate:
      on-profile: dev
  jpa:
    show-sql: true
  h2:
    console:
      enabled: true

logging:
  level:
    com.vamsasetu: DEBUG
    org.springframework.web: DEBUG

---
# Production Profile
spring:
  config:
    activate:
      on-profile: prod
  jpa:
    show-sql: false
  datasource:
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000

logging:
  level:
    com.vamsasetu: INFO
    org.springframework: WARN
    root: WARN

---
# Docker Profile
spring:
  config:
    activate:
      on-profile: docker
  datasource:
    url: jdbc:postgresql://postgres:5432/vamsasetu
    username: vamsasetu
    password: vamsasetu123
  neo4j:
    uri: bolt://neo4j:7687
    authentication:
      username: neo4j
      password: vamsasetu123
  data:
    redis:
      host: redis
      port: 6379
